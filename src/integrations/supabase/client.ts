
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vtaufnxworztolfdwlll.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ0YXVmbnh3b3J6dG9sZmR3bGxsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4ODIwMjUsImV4cCI6MjA1NjQ1ODAyNX0.O_Xg5cLp8x5FMQIYJKQKBCY8FC37AeJ5ffOhyEZ_yqg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create and initialize the storage buckets if they don't exist
const initializeBuckets = async () => {
  const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
  
  // Check if buckets exist or create them
  try {
    // First check if pub_images bucket exists
    const { data: imagesBucket, error: imagesError } = await supabase
      .storage
      .getBucket('pub_images');
    
    // Create pub_images bucket if it doesn't exist
    if (imagesError && imagesError.message.includes('does not exist')) {
      await supabase.storage.createBucket('pub_images', {
        public: true
      });
      console.log('Created pub_images bucket');
    }
    
    // Check if pub_audio bucket exists
    const { data: audioBucket, error: audioError } = await supabase
      .storage
      .getBucket('pub_audio');
    
    // Create pub_audio bucket if it doesn't exist
    if (audioError && audioError.message.includes('does not exist')) {
      await supabase.storage.createBucket('pub_audio', {
        public: true
      });
      console.log('Created pub_audio bucket');
    }
  } catch (error) {
    console.error('Error initializing storage buckets:', error);
  }
};

// Initialize buckets when the client is imported
initializeBuckets();

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

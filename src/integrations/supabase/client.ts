
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://vtaufnxworztolfdwlll.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ0YXVmbnh3b3J6dG9sZmR3bGxsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDA4ODIwMjUsImV4cCI6MjA1NjQ1ODAyNX0.O_Xg5cLp8x5FMQIYJKQKBCY8FC37AeJ5ffOhyEZ_yqg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create and initialize the storage buckets if they don't exist
const initializeBuckets = async () => {
  const supabase = createClient(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
  
  // Check if buckets exist or create them
  try {
    const buckets = ['pub_images', 'pub_audio', 'pub_documents'];
    
    for (const bucketName of buckets) {
      try {
        // Try to get the bucket info first
        const { data, error } = await supabase.storage.getBucket(bucketName);
        
        if (error) {
          if (error.message.includes('does not exist')) {
            console.log(`Bucket ${bucketName} doesn't exist, creating...`);
            const { data: bucketData, error: createError } = await supabase.storage.createBucket(bucketName, {
              public: true
            });
            
            if (createError) {
              console.error(`Error creating ${bucketName} bucket:`, createError);
            } else {
              console.log(`Created ${bucketName} bucket successfully`);
              
              // Add a public policy to the bucket
              const { data: policyData, error: policyError } = await supabase.storage.from(bucketName).getPublicUrl('test');
              if (!policyError) {
                console.log(`Public policy for ${bucketName} is set up`);
              }
            }
          } else {
            console.error(`Error checking ${bucketName} bucket:`, error);
          }
        } else {
          console.log(`Bucket ${bucketName} already exists`);
        }
      } catch (err) {
        console.error(`Error handling ${bucketName} bucket:`, err);
      }
    }
  } catch (error) {
    console.error('Error initializing storage buckets:', error);
  }
};

// Initialize buckets when the client is imported
initializeBuckets();

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
